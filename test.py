class MonitoringSystem:
    def __init__(self):
        self.wlan = None
        self.router = WiFiRouter(26)

        # –î–∞—Ç—á–∏–∫–∏
        self.sensors = SensorManager()
        self.data_sender = DataSender()

        # –°–µ—Ä–≤–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.servers = [
            ('mqtt', ('mqtt.broker.com', 1883)),
            ('api', ('api.telemetry.com', 443)),
        ]

        self.connection_checker = ConnectionChecker(self.wlan, self.servers)
        self.telegram_bot = TelegramBot(Config.TELEGRAM_BOT_TOKEN, Config.TELEGRAM_CHAT_ID)
        self.display = StatusDisplay()
        self.button = StatusButton(Config.BUTTON_PIN, self.display, self)

        # –ë—É—Ñ–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–≤—è–∑–∏
        self.data_buffer = []

    def collect_and_send_data(self):
        """–°–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤"""
        print("üîÑ Collecting sensor data...")

        # –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤
        sensor_data = self.sensors.read_all_sensors()
        sensor_data['timestamp'] = time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        result = self.connection_checker.check()

        if result is False or not result[1][0]:  # –ù–µ—Ç —Å–≤—è–∑–∏ –∏–ª–∏ MQTT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            # –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            self.data_buffer.append(sensor_data)
            print(f"üì¶ Data buffered. Buffer size: {len(self.data_buffer)}")

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            if len(self.data_buffer) > Config.MAX_BUFFER_SIZE:
                self.data_buffer.pop(0)

            return False

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        success = self.data_sender.send_mqtt(Config.MQTT_TOPIC, sensor_data)

        if success:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._send_buffered_data()

            # –î—É–±–ª–∏—Ä—É–µ–º –≤ HTTP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if result[1][1]:  # HTTP API –¥–æ—Å—Ç—É–ø–µ–Ω
                self.data_sender.send_http(Config.HTTP_API_URL, sensor_data)

            return True
        else:
            self.data_buffer.append(sensor_data)
            return False

    def _send_buffered_data(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.data_buffer:
            return

        print(f"üîÑ Sending buffered data ({len(self.data_buffer)} records)")

        successful_sends = 0
        for data in self.data_buffer[:]:  # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if self.data_sender.send_mqtt(Config.MQTT_TOPIC, data):
                self.data_buffer.remove(data)
                successful_sends += 1
            else:
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –Ω–µ—É–¥–∞—á–µ

        print(f"‚úÖ Sent {successful_sends} buffered records")

    def run_monitoring(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.router.start()

        if self.router.state:
            self.wlan = WiFiConnection(Config.WiFi_SSID, Config.WiFi_PASSWORD).create_wlan()
            self.connection_checker = ConnectionChecker(self.wlan, self.servers)

            self.display.show_message("System Starting...")
            self.check_and_report()

            last_data_send = 0
            start_time = time()

            while time() - start_time < Config.MONITORING_DURATION:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É
                self.button.check_button()

                current_time = time()

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                if current_time - last_data_send >= Config.DATA_SEND_INTERVAL:
                    self.collect_and_send_data()
                    last_data_send = current_time

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if int(current_time - start_time) % Config.CHECK_INTERVAL == 0:
                    self.check_and_report()

                sleep(0.1)